# This is a LIAM2 simulation file.

# This example builds upon the previous ones and introduces the following
# additional features: choice, logit_regr (alignment),
# an aggregate function (avg) and the default_entity option. We use
# the features we have introduced so far to add very simple birth and death
# functions to our model.

#  and the default_entity option.

# To run the simulation, press F6 if you are using the editor bundled with
# LIAM2, otherwise run the following command in a console: 
# [BUNDLEPATH]\liam2\main run demo06.yml
globals:
    periodic:
        - RETIREMENTAGE: int

entities:
    household:
        links:
            persons: {type: one2many, target: person, field: hh_id}

        processes:
            csv_output:
                - csv(period,
                      avg(persons.count()),
                      avg(persons.count(age < 18)),
                      fname='hh_size.csv', mode='a')

            init_reports:
                - csv('period', 'N persons', 'N children',
                      fname='hh_size.csv')
                      
            clean_empty:
                - empty: persons.count() == 0
                - show('Number of empty households:', count(empty))
                - remove(empty)

    person:
        fields:
            # period and id are implicit
            - age:        int
            - gender:     bool

            # link fields
            - mother_id:  int
            - hh_id:      int

            # fields not present in input
            - agegroup: {type: int, initialdata: False}

        links:
            mother: {type: many2one, target: person, field: mother_id}
            household: {type: many2one, target: household, field: hh_id}
            children: {type: one2many, target: person, field: mother_id}

        macros:
            UNSET: -1

            MALE: True
            FEMALE: False
            ISMALE: gender
            ISFEMALE: not gender

            ACTIVEAGE: (age >= 15) and (age < RETIREMENTAGE)

        # possible transitions and regressions
        processes:
            ageing:
                - age: age + 1
                - agegroup: if(age < 50,
                               5 * trunc(age / 5),
                               10 * trunc(age / 10))

            birth:
                - to_give_birth: logit_regr(0.0,
                                            filter=ISFEMALE and (age >= 15) and (age <= 50),
                                            align='al_p_birth.csv')
                - new('person', filter=to_give_birth,
                      mother_id = id,
                      hh_id = hh_id,
                      age = 0,
                      agegroup = 0,
                      gender = choice([MALE, FEMALE], [0.51, 0.49]))

            death:
                - dead: if(ISMALE,
                           logit_regr(0.0, align='al_p_dead_m.csv'),
                           logit_regr(0.0, align='al_p_dead_f.csv'))
                - mother_id: if(mother.dead, UNSET, mother_id)

                - show('Avg age of dead men',
                       avg(age, filter=dead and ISMALE))
                - show('Avg age of dead women',
                       avg(age, filter=dead and ISFEMALE))
                - remove(dead)

            get_a_life:
                - alone: household.get(persons.count() == 1)
                - hh_id: if(not alone and (age >= 24),
                            new('household'),
                            hh_id)
                
            chart_demography:
                - bar(groupby(agegroup, gender),
                      fname='demography_{period}.png')

            csv_output:
                - csv(groupby(agegroup, gender),
                      fname='demography_{period}.csv')

                - csv(period,
                      avg(age, filter=ISMALE), avg(age, filter=ISFEMALE),
                      avg(age),
                      fname='average_age.csv', mode='a')
                - csv(period, count(not ACTIVEAGE) / count(ACTIVEAGE),
                      fname='dependency_ratio.csv', mode='a')

            init_reports:
                - csv('period', 'men', 'women', 'total',
                      fname='average_age.csv')
                - csv('period', 'ratio', fname='dependency_ratio.csv')

simulation:
    init:
        - household: [init_reports, csv_output]
        - person: [init_reports, csv_output]

    processes:
        - person: [
            ageing, 
            birth, 
            death,
        ]
        - household: [clean_empty]
        - person: [get_a_life]
        # reporting
        - person: [
            chart_demography,
            csv_output
        ]
        - household: [csv_output]

    input:
        file: demo.h5
    output:
        path: output
        file: simulation.h5

    start_period: 2016
    periods: 2
    default_entity: person
